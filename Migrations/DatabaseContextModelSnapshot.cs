// <auto-generated />
using System;
using System.Collections.Generic;
using Autoease.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoEase_Scheduler.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Autoease.Domain.Aggregation.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uuid");

                    b.Property<string>("GarageRegister")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserIdCard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GarageRegister");

                    b.HasIndex("UserIdCard");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Autoease.Domain.Entities.GarageEntity", b =>
                {
                    b.Property<string>("GarageRegister")
                        .HasColumnType("text");

                    b.Property<string>("BusinessHour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GarageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Services")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("GarageRegister");

                    b.ToTable("Garages");
                });

            modelBuilder.Entity("Autoease.Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("UserIdCard")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserIdCard");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Autoease.Domain.Aggregation.Appointment", b =>
                {
                    b.HasOne("Autoease.Domain.Entities.GarageEntity", "Garage")
                        .WithMany()
                        .HasForeignKey("GarageRegister")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autoease.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserIdCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Autoease.Domain.ValueObjects.Veichle", "Veichle", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Brand")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Year")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("Garage");

                    b.Navigation("User");

                    b.Navigation("Veichle")
                        .IsRequired();
                });

            modelBuilder.Entity("Autoease.Domain.Entities.GarageEntity", b =>
                {
                    b.OwnsOne("Autoease.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("GarageEntityGarageRegister")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GarageEntityGarageRegister");

                            b1.ToTable("Garages");

                            b1.WithOwner()
                                .HasForeignKey("GarageEntityGarageRegister");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Autoease.Domain.Entities.UserEntity", b =>
                {
                    b.OwnsOne("Autoease.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("UserEntityUserIdCard")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserEntityUserIdCard");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserIdCard");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
